#   ylab("Time spent on tasks (sd)") +
#   xlab("Interactions with chameleon (avg)") +
#   geom_point(alpha = 0.5) +
#   geom_smooth(method="loess", formula=y ~ x)
# engagement %>%
#   ggplot() +
#   geom_bar(
#     mapping=aes(x=1, fill=factor(engagement_level), colour=factor(engagement_level)),
#     alpha=0.5) +
#
#   geom_label(
#     mapping=aes(x=1, label=..count.., colour=factor(engagement_level)),
#     stat = "count",
#     position="stack",
#   ) +
#   scale_x_continuous(labels = NULL) +
#   labs(x = NULL, y = NULL, fill="Engagement Level", colour="Engagement Level") +
#   scale_fill_brewer(type="qual", palette=1) +
#   scale_colour_brewer(type="qual", palette=1) +
#   theme_minimal()
# duration_count %>%
#   group_by(engagement_level, task) %>%
#   summarise(avg_duration = mean(duration), .groups="drop") %>%
#   ggplot() +
#   geom_col(
#     mapping=aes(
#       x = task,
#       y = avg_duration,
#       fill=factor(engagement_level),
#       colour=factor(engagement_level),
#       ),
#     position="dodge",
#     alpha=0.5
#   ) +
#
#   labs(y = "Time (Sec)", x = "Task", fill="Engagement Level", colour="Engagement Level") +
#   scale_x_continuous(breaks=0:8, labels=function(n) {n + 1}) +
#   scale_y_continuous(expand = c(0,0)) +
#   scale_fill_brewer(type="qual", palette=1) +
#   scale_colour_brewer(type="qual", palette=1) +
#   theme_minimal()
#
# duration_count %>%
#   group_by(engagement_level, task) %>%
#   summarise(avg_duration = mean(duration), .groups="drop")
# completed_participants |>
#   walk(function (participant) {
#     p <- duration_count |>
#       filter(participant_id == participant) |>
#       ggplot() +
#       labs(title=participant) +
#       geom_line(mapping = aes(x = task, y = duration, colour=factor(engagement_level))) +
#       scale_color_manual(values = c(`0` =  "red", `1` = "blue", `2` = "purple"))
#     plot(p)
#   })
# events %>%
#   filter(participant_id %in% completed_participants) %>%
#   filter(event_name == "Type Check") %>%
#   group_by(participant_id, task) |>
#   summarise(mistakes = n()) |>
#   left_join(engagement, by = c("participant_id")) |>
#   group_by(engagement_level, task) |>
#   summarise(
#     avg_mistake=mean(mistakes),
#     min_mistake=quantile(mistakes, 0),
#     max_mistake=quantile(mistakes, 1)
#   ) |>
#   filter(!(is.na(engagement_level))) |>
#   ggplot() +
#   geom_col(
#     mapping=aes(x = task, y = avg_mistake,
#                 fill=factor(engagement_level),
#                 colour=factor(engagement_level),
#
#                 ),
#     position="dodge",
#     alpha=0.5
#   )  +
#   labs(y = "Number of attemps (mean)", x = "Task", fill="Engagement Level", colour="Engagement Level") +
#   scale_fill_brewer(type="qual", palette=1) +
#   scale_colour_brewer(type="qual", palette=1) +
#   theme_minimal()
# events %>%
#   filter(participant_id %in% completed_participants) %>%
#   filter(event_name == "Type Check") %>%
#   group_by(participant_id, task) %>%
#   summarise(mistakes = n()) %>%
#   left_join(engagement, by = c("participant_id")) %>%
#   group_by(engagement_level, task) %>%
#   filter(!(is.na(engagement_level))) %>%
#   ggplot() +
#   geom_boxplot(
#     mapping=aes(x = factor(engagement_level), y = mistakes,
#                 fill=factor(engagement_level),
#                 colour=factor(engagement_level),
#
#                 ),
#     alpha=0.5
#   )  +
#   labs(y = "Number of attemps", x = "Task", fill="Engagement Level", colour="Engagement Level") +
#   scale_fill_brewer(type="qual", palette=1) +
#   scale_colour_brewer(type="qual", palette=1) +
#   theme_minimal()
#
#
# events %>%
#   filter(participant_id %in% completed_participants) %>%
#   filter(event_name == "Type Check") %>%
#   group_by(participant_id, task) %>%
#   summarise(mistakes = n()) %>%
#   left_join(engagement, by = c("participant_id")) %>%
#   group_by(engagement_level, task) %>%
#   summarise(mistake_mean = mean(mistakes), mistake_median = median(mistakes))
# events |>
#   filter(participant_id %in% completed_participants) |>
#   group_by(participant_id, task) |>
#   arrange(event_time, .by_group = TRUE) |>
#   mutate(interval=lead(event_time) - lag(event_time)) |>
#   mutate(interval=as.numeric(interval)) |>
#   filter(interval < 600) |>
#   filter(interval > 10) |>
#   left_join(engagement, by="participant_id") |>
#   ggplot() +
#   geom_bar(
#     mapping=aes(x = task,
#                 y = interval,
#                 fill=factor(engagement_level),
#                 colour=factor(engagement_level)),
#     stat="summary", fun = "mean",
#     position="dodge",
#     alpha=0.5
#     ) +
#   scale_x_continuous("Task", expand = c(0,0), breaks=0:8, labels=function (x) {x + 1}) +
#   scale_y_continuous("Mean pause time (sec)", expand = c(0,0)) +
#   labs( fill="Engagement Level", colour="Engagement Level") +
#   scale_fill_brewer(type="qual", palette=1) +
#   scale_colour_brewer(type="qual", palette=1) +
#   theme_minimal()
#
#
# events |>
#   filter(participant_id %in% completed_participants) |>
#   group_by(participant_id, task) |>
#   arrange(event_time, .by_group = TRUE) |>
#   mutate(interval=lead(event_time) - lag(event_time)) |>
#   mutate(interval=as.numeric(interval)) |>
#   filter(interval < 600) |>
#   filter(interval > 10) |>
#   left_join(engagement, by="participant_id") |>
#   group_by(engagement_level) |>
#   summarise(mean_interval=mean(interval, na.rm = TRUE), median_interval=median(interval, na.rm=TRUE))
# events |>
#   filter(participant_id %in% completed_participants) |>
#   group_by(participant_id, task) |>
#   arrange(event_time, .by_group = TRUE) |>
#   mutate(interval=lead(event_time) - lag(event_time)) |>
#   mutate(interval=as.numeric(interval)) |>
#   filter(interval < 600) |>
#   left_join(engagement, by="participant_id") |>
#   ggplot() +
#   geom_area(mapping=aes(interval, ..density..,
#                         fill=factor(engagement_level),
#                         colour=factor(engagement_level),
#
#               )
#             , stat = 'bin'
#             , binwidth = 10
#             , alpha=0.2
#             , position = "identity"
#   ) +
#   labs(x="Pause Time(sec)", y="Density",  fill="Engagement Level", colour="Engagement Level") +
#   scale_fill_brewer(type="qual", palette=1) +
#   scale_colour_brewer(type="qual", palette=1) +
#   theme_minimal()
# events |>
#   filter(participant_id %in% completed_participants) |>
#   group_by(participant_id, task) |>
#   arrange(event_time, .by_group = TRUE) |>
#   mutate(interval=lead(event_time) - lag(event_time)) |>
#   mutate(interval=as.numeric(interval)) |>
#   filter(interval < 600) |>
#
#   left_join(engagement, by="participant_id") |>
#   ggplot() +
#
#   geom_point(
#     mapping=aes(x = task,
#                 y = interval,
#                 colour=factor(engagement_level),
#                 size=interval
#                 ),
#     alpha=0.2,
#     position=position_dodge(0.4)
#     ) +
#   scale_x_continuous("Task", breaks=0:8, labels=function (x) {x + 1}) +
#   scale_y_continuous("Pause time (sec)") +
#   scale_fill_brewer(type="qual", palette=1) +
#   scale_colour_brewer(type="qual", palette=1) +
#   labs( fill="Engagement Level", colour="Engagement Level", size="Pasue time") +
#
#   theme_minimal()
# secondary_event_count |>
#   filter(participant_id %in% completed_participants) |>
#   left_join(engagement, by=c("participant_id")) |>
#   ggplot() +
#   geom_bar(
#     mapping=aes(task, count, fill = factor(engagement_level), colour = factor(engagement_level)),
#     stat = "summary",
#     alpha=0.5,
#     fun = "mean",
#     position="dodge") +
#   scale_x_continuous(labels=\(x) x + 1, breaks=0:8) +
#   scale_fill_brewer(type="qual", palette=1) +
#   scale_colour_brewer(type="qual", palette=1) +
#   labs( fill="Engagement Level", colour="Engagement Level", y="Number of secondary debugging tool events", x = "Task") +
#   theme_minimal()
#
# secondary_event_count |>
#   filter(participant_id %in% completed_participants) |>
#   left_join(engagement, by=c("participant_id")) |>
#   group_by(engagement_level) |>
#   summarise(sec_mean=mean(count), sec_med = median(count))
# backtracking_event_count |>
#   filter(participant_id %in% completed_participants) |>
#   left_join(engagement, by=c("participant_id")) |>
#   ggplot() +
#   geom_bar(
#     mapping=aes(1, count, fill = factor(engagement_level), colour = factor(engagement_level)),
#     stat = "summary",
#     alpha=0.5,
#     fun = "mean",
#     position="dodge") +
#   scale_x_continuous(labels=\(x) x + 1, breaks=0:8) +
#   scale_fill_brewer(type="qual", palette=1) +
#   scale_colour_brewer(type="qual", palette=1) +
#   labs( fill="Engagement Level", colour="Engagement Level", y="Number of backtracking events", x = "Task") +
#   theme_minimal()
# feedbacks <- read_csv("r4feedback.csv",
#   col_types = cols(haskell_experience = col_factor(
#     levels = c(
#       "Less than 1 year",
#       "1  - 2 year",
#       "2 - 3 year",
#       "3 - 4 year",
#       "4 - 5 year",
#       "Over 5 year"
#     )
#   ))
# )
#
# feedbacks %>%
#   select(
#     haskell_experience,
#     basic_mode_score,
#     balanced_mode_score,
#     advanced_mode_score
#   ) %>%
#   pivot_longer(
#     c(basic_mode_score, balanced_mode_score, advanced_mode_score),
#     names_to = "score_type",
#     values_to = "score"
#   ) %>%
#   ggplot() +
#   geom_boxplot(
#     mapping = aes(x = score_type, y = score, fill = score_type, colour=score_type),
#     alpha=0.5
#     ) +
#   scale_y_continuous("Score") +
#   scale_x_discrete(labels = function (x) {str_replace_all(x, "_", " ")}) +
#
#   scale_fill_brewer(type="qual", palette=2, labels = function (x) {str_replace_all(x, "_", " ")}) +
#   scale_colour_brewer(type="qual", palette=2, labels = function (x) {str_replace_all(x, "_", " ")}) +
#   labs(x = NULL, colour="Score Type", fill="Score Type") +
#   theme_minimal()
# feedbacks %>%
#   ggplot() +
#   geom_col(
#     mapping=aes(x=basic_mode_score, y = participant_id, alpha=basic_mode_score),
#     fill="#31a354",
#     colour="white",
#     width = 1
#     ) +
#   scale_y_discrete(labels=NULL) +
#   scale_alpha_continuous(range = c(0.3, 1)) +
#
#   scale_x_continuous("How helpful did you find Chameleon basic mode?", breaks=1:7) +
#   labs(y = NULL) +
#   theme_minimal() +
#   theme(panel.grid.major = element_blank(), axis.ticks = element_blank(), legend.position = 'none')
#
# feedbacks %>%
#   summarise(basic_mean=mean(basic_mode_score), balanced_mean=mean(balanced_mode_score), advanced_mean=mean(advanced_mode_score))
# feedbacks %>%
#   ggplot() +
#   geom_col(
#     mapping=aes(x=balanced_mode_score, y = participant_id, alpha=balanced_mode_score),
#     fill="#31a354",
#     colour="white",
#     width = 1
#     ) +
#     scale_alpha_continuous(range = c(0.3, 1)) +
#
#   scale_y_discrete(labels=NULL) +
#   scale_x_continuous("How helpful did you find Chameleon balanced mode?", breaks=1:7) +
#   labs(y = NULL) +
#   theme_minimal() +
#   theme(panel.grid.major = element_blank(), axis.ticks = element_blank(), legend.position = "none")
#
# feedbacks %>%
#   ggplot() +
#   geom_col(
#     mapping=aes(x=advanced_mode_score, y = participant_id, alpha=advanced_mode_score),
#     fill="#31a354",
#     colour="white",
#     width = 1
#     ) +
#   scale_alpha_continuous(range = c(0.3, 1)) +
#   scale_y_discrete(labels=NULL) +
#   scale_x_continuous("How helpful did you find Chameleon advanced mode?", breaks=1:7) +
#   labs(y = NULL) +
#   theme_minimal() +
#   theme(panel.grid.major = element_blank(), axis.ticks = element_blank(), legend.position = "none")
# feedbacks %>%
#   ggplot() +
#     geom_bar(
#     mapping=aes(x=1, fill=switch_mode_helpful, colour=switch_mode_helpful),
#     alpha=0.5) +
#
#   geom_label(
#     mapping=aes(x=1, label=..count.., colour=switch_mode_helpful),
#     stat = "count",
#     position="stack",
#     size=2
#   ) +
#   scale_x_continuous(labels = NULL) +
#   labs(x = NULL, y = NULL, fill="Did the ability to switch mode help you debug type errors?
# ", colour="Did the ability to switch mode help you debug type errors?
# ") +
#   scale_fill_brewer(type="qual", palette=1) +
#   scale_colour_brewer(type="qual", palette=1) +
#   theme_minimal() +
#   theme(legend.position = "bottom")
adapt_to_no_feature <- events |>
filter(participant_id %in% completed_participants) %>%
group_by(participant_id) |>
filter(event_name %in% c(
"Next Step",
"Previous Step",
"Go To Step",
"Go To Expression",
"Set Advanced Mode",
"Set Basic Mode",
"Set Balanced Mode",
"Narrow To Possible Type 2",
"Narrow To Possible Type 1"
)) |>
summarise(count = n()) %>%
filter(count < 20) %>%
.$participant_id
adapt_to_basic_feature <- events |>
filter(participant_id %in% completed_participants) %>%
filter(! participant_id %in% adapt_to_no_feature) %>%
group_by(participant_id) |>
filter(event_name %in% c(
"Next Step",
"Previous Step",
"Peek Step",
"Go To Step",
"Peek Expression",
"Go To Expression",
"Set Advanced Mode",
"Set Basic Mode",
"Set Balanced Mode")) |>
summarise(count = n()) |>
filter(count < 100) %>%
.$participant_id
adapt_to_advanced_feature <- events |>
filter(participant_id %in% completed_participants) %>%
filter(! participant_id %in% adapt_to_no_feature) %>%
filter(! participant_id %in% adapt_to_basic_feature) %>%
distinct(participant_id) %>%
.$participant_id
with_participation_type <- duration_count |>
filter(participant_id %in% completed_participants) %>%
mutate(
participation_type = case_when(
participant_id %in% adapt_to_no_feature ~ "no feature",
participant_id %in% adapt_to_basic_feature ~ "common feature",
participant_id %in% adapt_to_advanced_feature ~ "advaned feature"
)
)
err_left <- function (n, m, s) {
return (m - qt(0.975,df=n-1)*s/sqrt(n))
}
err_right <- function (n, m, s) {
return (m + qt(0.975,df=n-1)*s/sqrt(n))
}
with_participation_type %>%
group_by(participation_type, task) %>%
summarise(
avg_duration = mean(duration),
upper = err_right(n(), mean(duration), sd(duration)),
lower = err_left(n(), mean(duration), sd(duration)),
.groups="drop"
) %>%
ggplot(aes(
x = task,
y = avg_duration
)) +
geom_col(
mapping=aes(
fill=participation_type,
colour=participation_type,
),
position="dodge",
alpha=0.5
) +
geom_errorbar(aes(ymin=lower, ymax=upper, group=participation_type),
position=position_dodge(0.9), alpha=0.5, width=0.5 ) +
labs(y = "Time (Sec)", x = "Task", fill="Feature Usage", colour="Feature Usage") +
scale_x_continuous(breaks=0:8, labels=\(n) n + 1) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_brewer(type="qual", palette=1) +
scale_colour_brewer(type="qual", palette=1) +
theme_minimal()
one.way <- aov(duration ~ participation_type, with_participation_type)
summary(one.way)
with_participation_type |>
filter(count <= 150)  %>%
filter(duration <= 600) %>%
ggplot() +
geom_point(mapping = aes(x = count, y = duration, colour= participation_type), size=1) +
facet_wrap(~ task)+
scale_colour_brewer(type="qual", palette=1)  +
labs(y = "Time (Sec)", x = "Interactions",  colour="Feature Usage")
# feature_usages <- factor()
tibble(
v = c(7,12,15),
l = factor(c("No features", "Common features", "Special features"),
levels=c("No features", "Common features", "Special features"))
) %>%
ggplot() +
geom_col(
mapping=aes(x=1, y = v, fill=l, colour=l),
alpha=0.5,
position="dodge"
) +
geom_label(
mapping=aes(x=1, y=v, label=v, colour=l),
position=position_dodge(width=0.9)
) +
scale_x_continuous(labels = NULL) +
labs(x = NULL, y = NULL, fill="Feature usage", colour="Feature usage") +
scale_fill_brewer(type="qual", palette=1, breaks=c("No features", "Common features", "Special features")) +
scale_colour_brewer(type="qual", palette=1, breaks=c("No features", "Common features", "Special features")) +
theme_minimal()
event_first_ob <- events %>%
arrange(event_time) %>%
group_by(participant_id, task) %>%
summarise(
start_time = first(event_time),
start_mode = first(mode)
)
event_last_ob <- events %>%
arrange(event_time) %>%
filter(event_name == "Succeed") %>%
group_by(participant_id, task) %>%
summarise(
finish_time = last(event_time),
finish_mode = last(mode)
)
start_mode_labeller <- c(
`Basic Mode` = "Start w/ Basic Mode",
`Balanced Mode` = "Start w/ Balanced Mode",
`Advanced Mode` = "Start w/ Advanced Mode"
)
finish_mode_labeller <- c(
`Basic Mode` = "Finish w/ Basic Mode",
`Balanced Mode` = "Finish w/ Balanced Mode",
`Advanced Mode` = "Finish w/ Advanced Mode"
)
durations <- right_join(event_first_ob,
event_last_ob,
by = c("participant_id", "task")
) %>%
mutate(duration = finish_time - start_time) %>%
mutate(duration= as.numeric(duration)) %>%
mutate(duration = ifelse (duration > 20, duration, NA))
durations %>%
filter(duration < 3000) %>%
ggplot() +
geom_label(mapping = aes(x = 1, label=..count..), stat="bin") +
facet_grid(
start_mode ~ finish_mode,
switch = "y",
labeller = labeller(
start_mode = as_labeller(start_mode_labeller),
finish_mode = as_labeller(finish_mode_labeller)
)
)
events |>
filter(participant_id %in% completed_participants) %>%
group_by(participant_id) |>
summarise(runtime = max(event_time) - min(event_time)) |>
filter(runtime <= 2000) |>
summarise(mean_runtime = mean(runtime),
median_runtime = median(runtime)
)
durations %>%
filter(duration < 600) %>%
.$duration %>%
sd(na.rm=TRUE)
